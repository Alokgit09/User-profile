<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>User Chat App</title>
    <style>
      body { margin: 0; padding-bottom: 3rem; font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif; }

    #form {
    background: rgba(0, 0, 0, 0.15);
    padding: 0.25rem;
    position: fixed;
    bottom: 0;
    width: 800px;
    margin-left: auto;
    margin-right: auto;
    left: 0;
    right: 0;
    display: flex;
    height: 3rem;
    box-sizing: border-box;
    backdrop-filter: blur(10px);
}
.container {
    width: 800px;
    margin: auto;
    text-align: center;
}
      #input { border: none; padding: 0 1rem; flex-grow: 1; border-radius: 2rem; margin: 0.25rem; }
      #input:focus { outline: none; }
      #form > button { background: #333; border: none; padding: 0 1rem; margin: 0.25rem; border-radius: 3px; outline: none; color: #fff; }

      #messages { list-style-type: none; margin: 0; padding: 0; }
      #messages > li { padding: 0.5rem 1rem; }
    </style>
  </head>
  <body>
    <div class="container">

  <h2>Chat with User: <%= userId %></h2>
  <p>Welcome to the EJS template engine tutorial.</p>

  <ul id="messages"></ul>
  <form id="form" action="">
    <input id="input" autocomplete="off" /><button>Send</button>
  </form>
  </div>
  <script src="/socket.io/socket.io.js"></script>
<script>
  const socket = io();
  const form = document.getElementById('form');
  const input = document.getElementById('input');
  const messages = document.getElementById('messages');
  form.addEventListener('submit', function(e) {
   e.preventDefault();
   if (input.value.trim() !== "") {
        const message = input.value;
        // Append the message as "sent" before sending to server
        appendMessage(message, "sent");
        // Send message to the server
        socket.emit('chat message', message);
        input.value = "";
    }
    
  });
  socket.on('response', (data) => {
    appendMessage(data, "received");
  });
  
  // socket.on('privateMessage', (data) => {

  // });
 
  function appendMessage( data, type) {
    const li = document.createElement('li');
    const span = document.createElement('span');
    span.textContent = data;
    span.style.padding = "10px";
    span.style.borderRadius = "8px 8px 0px 8px";
    span.style.display = "inline-block";

    li.style.listStyle = "none"; // Remove bullet points
    li.style.display = "flex";  // Flexbox for alignment
    if (type === "sent") {
        li.style.justifyContent = "flex-end"; // Align to right
        span.style.backgroundColor = "#d1e7dd";
    } else {
      li.style.justifyContent = "flex-start"; // Align to left
      span.style.backgroundColor = "#f8d7da";
    }
    li.appendChild(span);
    messages.appendChild(li);
    window.scrollTo(0, document.body.scrollHeight);

  };


</script>
  </body>
</html> 